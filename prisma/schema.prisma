// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

<<<<<<< HEAD
generator client {
  provider = "prisma-client-js"
=======
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
>>>>>>> 100369d1eacef8202e256748448d5c057899f65f
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
<<<<<<< HEAD

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  tickets       Ticket[]  @relation("CreatedTickets")
  assigned      Ticket[]  @relation("AssignedTickets")
  comments      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Ticket {
  id           String    @id @default(cuid())
  title        String
  description  String    @db.Text
  status       Status    @default(OPEN)
  priority     Priority  @default(MEDIUM)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  createdById  String
  assignedToId String?
  
  createdBy    User      @relation("CreatedTickets", fields: [createdById], references: [id])
  assignedTo   User?     @relation("AssignedTickets", fields: [assignedToId], references: [id])
  comments     Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ticketId  String
  userId    String

  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum Status {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
} 
=======
>>>>>>> 100369d1eacef8202e256748448d5c057899f65f
